Exercises

Questions

1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

A:

sort commands.js output: The code written in the commands.js file is displayed in sorted order (looks to include spaces as characters)

            //we will add the functionality of echo within the object commandLibrary
            break;
            break;
            commandLibrary.cat(userInputArray.slice(1));
            commandLibrary.echo(userInputArray.slice(1).join(" "));
            done(data);
            if (err) throw err;
        case "cat":
        case "echo":
        const fileName = fullPath[0];
        done(userInput);
        fs.readFile(fileName, (err, data) => {
        });
    "cat": function(fullPath) {
    "echo": function(userInput) {
    //parses the user input to understand which command was typed
    //the cat command
    //the echo command
    const command = userInputArray[0];
    const userInputArray = userInput.split(" ");
    process.stdout.write('\nprompt > ');
    process.stdout.write(output);
    switch (command) {
    }
    }
    },
//where we will store our commands
//where we will store the logic of our commands
//write out data
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
}
}
};


wc commands.js output: The ws command gives us a breakdown of number of lines, words and byte counts of the files.

42 118 1159 commands.js


uniq commands.js output: The uniq command will sort all lines and only return unique lines.

const fs = require("fs");

//write out data
function done(output) {
    process.stdout.write(output);
    process.stdout.write('\nprompt > ');
}

//where we will store our commands
function evaluateCmd(userInput) {
    //parses the user input to understand which command was typed
    const userInputArray = userInput.split(" ");
    const command = userInputArray[0];

    switch (command) {
        case "echo":
            //we will add the functionality of echo within the object commandLibrary
            commandLibrary.echo(userInputArray.slice(1).join(" "));
            break;
        case "cat":
            commandLibrary.cat(userInputArray.slice(1));
            break;
    }
}

//where we will store the logic of our commands
const commandLibrary = {
    //the echo command
    "echo": function(userInput) {
        done(userInput);
    },
    //the cat command
    "cat": function(fullPath) {
        const fileName = fullPath[0];
        fs.readFile(fileName, (err, data) => {
            if (err) throw err;
            done(data);
        });
    }
};

module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;


2: Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

A:

uniq commands.js | wc
output:
42 118 1159

This output shows the numbers of unique lines, words and characters in commands.js


sort commands.js | uniq
output:
            //we will add the functionality of echo within the object commandLibrary
            break;
            commandLibrary.cat(userInputArray.slice(1));
            commandLibrary.echo(userInputArray.slice(1).join(" "));
            done(data);
            if (err) throw err;
        case "cat":
        case "echo":
        const fileName = fullPath[0];
        done(userInput);
        fs.readFile(fileName, (err, data) => {
        });
    "cat": function(fullPath) {
    "echo": function(userInput) {
    //parses the user input to understand which command was typed
    //the cat command
    //the echo command
    const command = userInputArray[0];
    const userInputArray = userInput.split(" ");
    process.stdout.write('\nprompt > ');
    process.stdout.write(output);
    switch (command) {
    }
    },
//where we will store our commands
//where we will store the logic of our commands
//write out data
const commandLibrary = {
const fs = require("fs");
function done(output) {
function evaluateCmd(userInput) {
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
}
};

This pipe sorted the lines of code in order and removed any repeats - unique lines only.


Programming Questions

6. Given a string, reverse the order of characters in each word within a sentence while maintaining the original word order and whitespace and return the string. To improve your problem-solving experience, use the suggested functions to solve the problem.

A:

const reverseString = (string) => {

    let splitString = string.split(""); 
    let reverseArray = splitString.reverse();
    let joinArray = reverseArray.join("");
    return joinArray; 
};

console.log(reverseString("What is my name?"));
console.log(reverseString("Brittany"));

